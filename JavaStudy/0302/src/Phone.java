
public class Phone {
	//클래스란 ?! 사물이 가지는 필드(속성)와 메소드(기능)을 묶어둔 사용자 임의의 자료형 이다!
	//--> 현실에 있는 물체를 표현할 수 있는 사용자 임의의 자료형(type)이다!!
	//클래스를 만들기 위해서는 추상화, 캡슐화 라는 작업을 통해 만들어 진다!
	
	//객체란? 인스턴스라고도 부른다, 클래스(자료형)를 바탕으로 만든 제품
	
	//객체지향프로그래밍의 특징
	//1캡슐화 - 필드(속성)와 메소드(기능)를 하나로 묶고 실제 구현내용을 외부로 감추는 기법(정보은닉)
	//2상속 - 기존 코드를 그대로 재사용하거나 재정의(오버라이딩) ->재사용+확장
	//3추상화 - 객체에서 공통된 속성과 행위를 추출하는 기법, 필요한 정보들만 간추려서 구성
	//4다형성 - 같은 메소드를 호출하더라 객체에 따라 다르게 동작하는 것
//	 			다시 정의하여 사용하는 것(오버라이딩)
//	장점 - 유지보수가 용이하다, 소프트웨어 생산성이 향상된다
//		신뢰성 있는 소프트웨어를 쉽게 작성가능,코드를 재사용하기 쉽다, 직관적인 코드 분석이 가능하다
	
	//휴대폰 하면 어떤게 생각나나요??
	//1.전화를 걸다
	//2.전화를 받다
	//3.브랜드
	//4.게임을 하다
	//5.전화번호
	//위의 5가지 역할을 하는 어떤것이 있다면 그건 휴대폰이라고 칭할 수 있다!
	
	//data와 기능을 따로 분리!
	//data 브랜드, 전화번호
	String brand;
	//접근제한자 'private' --> 해당 클래스 내에서만 접근이 가능하게끔! 접근을 허용할거에요!
	String number;
	
	//기능을 코드로 표현 --> 메소드로 만들어 주면됨!!
	//전화 걸다,받다 게임
	//다른 클래스 에서는 메소드를 만들때 static 을 안붙여도 된다!
	public void Call() {
		System.out.println("전화를 걸다");
	}
	public void Send() {
		System.out.println("전화를 받다");
	}
	public void Gmae() {
		System.out.println("모바일배그를하다");
	}
	
	
}

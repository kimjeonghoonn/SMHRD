/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-21 08:09:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chatting123_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(document.ready(function({\r\n");
      out.write("     // 웹 소켓 초기화\r\n");
      out.write("   	webSocketInit();\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("//웹소켓 생성\r\n");
      out.write("var webSocket;\r\n");
      out.write("\r\n");
      out.write("function webSocketInit()\r\n");
      out.write("{\r\n");
      out.write("    webSocket = new WebSocket(\"ws://localhost:8080/websocket\");\r\n");
      out.write("	webSocket.onopen = function(event) { socketOpen(event);};\r\n");
      out.write("	webSocket.onclose = function(event) { socketClose(event);};\r\n");
      out.write("	webSocket.onmessage = function(event) { socketMessage(event);};\r\n");
      out.write("	webSocket.onerror = function(event) { socketError(event);};\r\n");
      out.write("}  \r\n");
      out.write("  //웹소켓 연결\r\n");
      out.write("  function socketOpen(event){\r\n");
      out.write("     console.log(\"연결 완료\");\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  //웹소켓 닫힘\r\n");
      out.write("  function socketClose(event){\r\n");
      out.write("  	 console.log(\"웹소켓이 닫혔습니다.\");\r\n");
      out.write("  	 \r\n");
      out.write("     // 웹소켓이 닫혀있으면 재연결을 시도합니다.\r\n");
      out.write("     // webSocket이 close되면 오브젝트의 속성, 메서드가 사라지기 때문에,\r\n");
      out.write("     // 해당 함수를 호출하여 초기화하여 줍니다.\r\n");
      out.write("     webSocketInit(); \r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  //메시지를 송신할 때 사용\r\n");
      out.write("  function socketMsgSend(){\r\n");
      out.write("     // 메시지 포맷\r\n");
      out.write("     var msg = {\r\n");
      out.write("     	type : \"message\",\r\n");
      out.write("        value : \"메시지입니다.\",\r\n");
      out.write("        seq : $(\"#seq\").val();\r\n");
      out.write("     }\r\n");
      out.write("     \r\n");
      out.write("     // 세션리스트에 메시지를 송신한다.\r\n");
      out.write("     webSocket.send(msg)\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  //웹소켓 메시지 수신\r\n");
      out.write("  function socketMessage(event){\r\n");
      out.write("  	  var receiveData = event.data; // 수신 data\r\n");
      out.write("      alert(\"수신된 msg : \" + receiveData);\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  //웹소켓 에러\r\n");
      out.write("  function socketError(event){\r\n");
      out.write("  	alert(\"에러가 발생하였습니다.\");\r\n");
      out.write("  }\r\n");
      out.write("  \r\n");
      out.write("  //웹소켓 종료\r\n");
      out.write("  function disconnect(){\r\n");
      out.write("  	webSocket.close();\r\n");
      out.write("  }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

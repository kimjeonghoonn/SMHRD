/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-07-15 03:28:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.smhrd.domain.Hobby;
import java.math.BigDecimal;
import com.smhrd.domain.HobbyDAO;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.smhrd.domain.HobbyDAO");
    _jspx_imports_classes.add("java.math.BigDecimal");
    _jspx_imports_classes.add("com.smhrd.domain.Hobby");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("    <script src = \"js/jquery-3.6.0.js\"></script>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"assets/chat.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"max-width: 523px; height:940px;\"> \r\n");
      out.write("    <div class=\"chat_wrap\" >\r\n");
      out.write("        <div class=\"header\" style=\"max-width: 523px; background-color:#ffc107; font-family:'jalnan';'\">\r\n");
      out.write("            CHAT\r\n");
      out.write("            <button class=\"safe\" onclick=\"location.href='ansim.jsp'\" style=\"font-size:14px;  border-radius:25px; border:1px solid black;  background:white; font-family:ibm; color:black;\">스케줄</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"anotherMsg\">\r\n");
      out.write("            <br><br><br>\r\n");
      out.write("            <span class=\"anotherName\">판매자</span> <br>\r\n");
      out.write("            <span class=\"msg\">반갑습니다.</span>\r\n");
      out.write("        </div>              \r\n");
      out.write("        <div class=\"chat\">\r\n");
      out.write("            <ul class=\"booy\">\r\n");
      out.write("                <!-- 동적 생성 -->\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"input-div\" style=\"width:523px;\">\r\n");
      out.write("            <textarea placeholder=\"채팅 치세요.\" style=\"width:513px;\"></textarea>\r\n");
      out.write("        </div>\r\n");
      out.write("     \r\n");
      out.write("        <!-- format -->\r\n");
      out.write("     \r\n");
      out.write("        \r\n");
      out.write("        <div class=\"chat format\">\r\n");
      out.write("            <ul id=\"chat\">\r\n");
      out.write("                \r\n");
      out.write("                <li>\r\n");
      out.write("                    \r\n");
      out.write("                    <div class=\"sender\">\r\n");
      out.write("                        <span></span>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"message\">\r\n");
      out.write("                        <span></span>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("const Chat = (function(){\r\n");
      out.write("    const myName = \"왜 안될\";\r\n");
      out.write(" \r\n");
      out.write("    // init 함수\r\n");
      out.write("    function init() {\r\n");
      out.write("        // enter 키 이벤트\r\n");
      out.write("        $(document).on('keydown', 'div.input-div textarea', function(e){\r\n");
      out.write("            if(e.keyCode == 13 && !e.shiftKey) {\r\n");
      out.write("                e.preventDefault();\r\n");
      out.write("                const message = $(this).val();\r\n");
      out.write(" \r\n");
      out.write("                // 메시지 전송\r\n");
      out.write("                sendMessage(message);\r\n");
      out.write("                // 입력창 clear\r\n");
      out.write("                clearTextarea();\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write(" \r\n");
      out.write("    // 메세지 태그 생성\r\n");
      out.write("    function createMessageTag(LR_className, senderName, message) {\r\n");
      out.write("        // 형식 가져오기\r\n");
      out.write("        let chatLi = $('div.chat.format ul li').clone();\r\n");
      out.write(" \r\n");
      out.write("        // 값 채우기\r\n");
      out.write("        chatLi.addClass(LR_className);\r\n");
      out.write("        chatLi.find('.sender span').text(senderName);\r\n");
      out.write("        chatLi.find('.message span').text(message);\r\n");
      out.write(" \r\n");
      out.write("        return chatLi;\r\n");
      out.write("    }\r\n");
      out.write(" \r\n");
      out.write("    // 메세지 태그 append\r\n");
      out.write("    function appendMessageTag(LR_className, senderName, message) {\r\n");
      out.write("        const chatLi = createMessageTag(LR_className, senderName, message);\r\n");
      out.write(" \r\n");
      out.write("        $('div.chat:not(.format) ul').append(chatLi);\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("               var scrollingElement = (document.scrollingElement || document.body);\r\n");
      out.write("               scrollingElement.scrollTop = scrollingElement.scrollHeight;\r\n");
      out.write("        \r\n");
      out.write("        // 스크롤바 아래 고정\r\n");
      out.write("        $('div.chat').scrollTop($('#div.chat').prop('scrollHeight'));\r\n");
      out.write("    }\r\n");
      out.write(" \r\n");
      out.write("    // 메세지 전송\r\n");
      out.write("    function sendMessage(message) {\r\n");
      out.write("        // 서버에 전송하는 코드로 후에 대체\r\n");
      out.write("        const data = {\r\n");
      out.write("            \"senderName\"    : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.user_nick}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\",\r\n");
      out.write("            \"message\"        : message\r\n");
      out.write("        };\r\n");
      out.write(" \r\n");
      out.write("        // 통신하는 기능이 없으므로 여기서 receive\r\n");
      out.write("        resive(data);\r\n");
      out.write("    }\r\n");
      out.write(" \r\n");
      out.write("    // 메세지 입력박스 내용 지우기\r\n");
      out.write("    function clearTextarea() {\r\n");
      out.write("        $('div.input-div textarea').val('');\r\n");
      out.write("    }\r\n");
      out.write(" \r\n");
      out.write("    // 메세지 수신\r\n");
      out.write("    function resive(data) {\r\n");
      out.write("        const LR = (data.senderName != myName)? \"left\" : \"right\";\r\n");
      out.write("        appendMessageTag(\"right\", data.senderName, data.message);\r\n");
      out.write("    }\r\n");
      out.write(" \r\n");
      out.write("    return {\r\n");
      out.write("        'init': init\r\n");
      out.write("    };\r\n");
      out.write("})();\r\n");
      out.write(" \r\n");
      out.write("$(function(){\r\n");
      out.write("    Chat.init();\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

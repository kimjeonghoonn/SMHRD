/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-25 06:54:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/smhrd/Desktop/김정훈/Web(Server)/.metadata/.plugins/org.eclipse.wst.server.core/tmp1/wtpwebapps/project2_h5/WEB-INF/lib/standard-1.1.2.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
    _jspx_dependants.put("/WEB-INF/lib/standard-1.1.2.jar", Long.valueOf(1651644703037L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"assets/join.css\">\r\n");
      out.write("    <script type=\"text/javascript\" src =\"jquery-3.6.0.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   <body>\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"joinForm\">                                                                                      \r\n");
      out.write("        <h2 class = \"join-in\">바나다</h2>\r\n");
      out.write("\r\n");
      out.write("        <!-- 액션 적용 -->\r\n");
      out.write("        <form action=\"JoinCon\">\r\n");
      out.write("        <section class = \"join-box\">\r\n");
      out.write("        <div class=\"textForm\" dir=\"ltr\" style=\"border-top: 1px solid #ffc107; text-align: left;\">\r\n");
      out.write("          <input id=\"id\" name=\"id\" style=\"width:300px; height:25px; \" type=\"text\" class=\"id\" placeholder=\"아이디\" />\r\n");
      out.write("        <input type=\"button\" value=\"중복체크\" onclick=\"idCheck()\"/>\r\n");
      out.write("        <span id=\"idCheck\"></span>\r\n");
      out.write("        </div>\r\n");
      out.write("        <p style=\"text-align:center; border-bottom: 1px solid #ffc107;\" >\r\n");
      out.write("          4~12자의 영문 대소문자와 숫자로만 입력 하세요.\r\n");
      out.write("        </p>\r\n");
      out.write("        <div class=\"textForm\">\r\n");
      out.write("          <input name=\"pw\" type=\"password\" class=\"pw\" placeholder=\"비밀번호\">\r\n");
      out.write("        </div>\r\n");
      out.write("         <div class=\"textForm\">\r\n");
      out.write("           <input name=\"pw\" type=\"password\" class=\"pw\" placeholder=\"비밀번호 확인\">\r\n");
      out.write("         </div>\r\n");
      out.write("        <div class=\"textForm\" style=\"text-align: left;\">\r\n");
      out.write("           <input id=\"nick\" name=\"nick\"  style=\"width:300px; height:25px; \" class=\"pw\" placeholder=\"닉네임\">\r\n");
      out.write("           <input type=\"button\" value=\"중복체크\" onclick=\"nickCheck()\"/>\r\n");
      out.write("           <span id=\"nickCheck\"></span>\r\n");
      out.write("         </div>\r\n");
      out.write("        <p id = \"pw2\" style=\"text-align:center; border-bottom: 1px solid #ffc107;\">\r\n");
      out.write("          닉네임은 2~8글자 이내여야 합니다.\r\n");
      out.write("        </p>\r\n");
      out.write("        <div class=\"textForm\" dir=\"ltr\" style=\" text-align: left;\">\r\n");
      out.write("          <input  id=\"address_kakao\" name=\"address\" style=\"width:300px; height:25px;\" type=\"text\" class=\"pw\" readonly  placeholder=\"주소\"/>\r\n");
      out.write("        </div>\r\n");
      out.write("        <p id = \"pw2\" style=\"text-align:center; border-bottom: 1px solid #ffc107;\">\r\n");
      out.write("          주소 찾기를 눌러 입력받아주세요\r\n");
      out.write("        </p>\r\n");
      out.write("        <input type=\"hidden\" name=\"product\" value=\" \">\r\n");
      out.write("        <input type=\"submit\" style=\"color:white; background:#ffc107; border:none;\" class=\"btn\" value=\"회 원 가 입\"/>\r\n");
      out.write("      </section>\r\n");
      out.write("       \r\n");
      out.write("       </form>\r\n");
      out.write("     \r\n");
      out.write("\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js?\"></script>\r\n");
      out.write("		<script>\r\n");
      out.write("		window.onload = function(){\r\n");
      out.write("		    document.getElementById(\"address_kakao\").addEventListener(\"click\", function(){ //주소입력칸을 클릭하면\r\n");
      out.write("		        //카카오 지도 발생\r\n");
      out.write("		        new daum.Postcode({\r\n");
      out.write("		            oncomplete: function(data) { //선택시 입력값 세팅\r\n");
      out.write("		                document.getElementById(\"address_kakao\").value = data.address; // 주소 넣기\r\n");
      out.write("		            }\r\n");
      out.write("		        }).open();\r\n");
      out.write("		    });\r\n");
      out.write("		}\r\n");
      out.write("</script>\r\n");
      out.write("			<script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script>\r\n");
      out.write("			<script>\r\n");
      out.write("				function idCheck(){\r\n");
      out.write("					let id = $('#id').val();\r\n");
      out.write("					\r\n");
      out.write("					// jquery로 ajax(비동기통신) 작성\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						// 전송데이터(json)\r\n");
      out.write("						data : {'user_id': id},\r\n");
      out.write("						// 요청 경로(url 매핑값)\r\n");
      out.write("						url : 'IdCheckCon',\r\n");
      out.write("						// 요청 방식(get/post)\r\n");
      out.write("						method : 'get',\r\n");
      out.write("						//전송데이터 정보(형식, 인코딩 방식)\r\n");
      out.write("						contentType : 'application/json; charset=utf-8',\r\n");
      out.write("						//응답데이터 형식지정\r\n");
      out.write("						dataType : 'text',\r\n");
      out.write("						success : function(data){ //'사용할 수 있다'(응답) -> data('사용할 수 있다')\r\n");
      out.write("							if(data=='true'){\r\n");
      out.write("								$('#idCheck').text('사용할 수 있는 아이디')				\r\n");
      out.write("							}else{\r\n");
      out.write("								$('#idCheck').text('사용할 수 없는 아이디')\r\n");
      out.write("							}							\r\n");
      out.write("						},\r\n");
      out.write("						error : function(){\r\n");
      out.write("							alert(\"통신실패!\")\r\n");
      out.write("						}\r\n");
      out.write("					})\r\n");
      out.write("				}\r\n");
      out.write("			</script>\r\n");
      out.write("			<script>\r\n");
      out.write("				function nickCheck(){\r\n");
      out.write("					let nick = $('#nick').val();\r\n");
      out.write("					\r\n");
      out.write("					// jquery로 ajax(비동기통신) 작성\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						// 전송데이터(json)\r\n");
      out.write("						data : {'user_nick': nick},\r\n");
      out.write("						// 요청 경로(url 매핑값)\r\n");
      out.write("						url : 'NickCheckCon',\r\n");
      out.write("						// 요청 방식(get/post)\r\n");
      out.write("						method : 'get',\r\n");
      out.write("						//전송데이터 정보(형식, 인코딩 방식)\r\n");
      out.write("						contentType : 'application/json; charset=utf-8',\r\n");
      out.write("						//응답데이터 형식지정\r\n");
      out.write("						dataType : 'text',\r\n");
      out.write("						success : function(data){ //'사용할 수 있다'(응답) -> data('사용할 수 있다')\r\n");
      out.write("							if(data=='true'){\r\n");
      out.write("								$('#nickCheck').text('사용할 수 있는 닉네임')				\r\n");
      out.write("							}else{\r\n");
      out.write("								$('#nickCheck').text('사용할 수 없는 닉네임')\r\n");
      out.write("							}							\r\n");
      out.write("						},\r\n");
      out.write("						error : function(){\r\n");
      out.write("							alert(\"통신실패!\")\r\n");
      out.write("						}\r\n");
      out.write("					})\r\n");
      out.write("				}\r\n");
      out.write("			</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
